// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PublishMessage extends ethereum.Event {
  get params(): PublishMessage__Params {
    return new PublishMessage__Params(this);
  }
}

export class PublishMessage__Params {
  _event: PublishMessage;

  constructor(event: PublishMessage) {
    this._event = event;
  }

  get _message(): PublishMessage_messageStruct {
    return this._event.parameters[0].value.toTuple() as PublishMessage_messageStruct;
  }

  get _encPubKey(): PublishMessage_encPubKeyStruct {
    return this._event.parameters[1].value.toTuple() as PublishMessage_encPubKeyStruct;
  }
}

export class PublishMessage_messageStruct extends ethereum.Tuple {
  get iv(): BigInt {
    return this[0].toBigInt();
  }

  get data(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

export class PublishMessage_encPubKeyStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class SignUp extends ethereum.Event {
  get params(): SignUp__Params {
    return new SignUp__Params(this);
  }
}

export class SignUp__Params {
  _event: SignUp;

  constructor(event: SignUp) {
    this._event = event;
  }

  get _userPubKey(): SignUp_userPubKeyStruct {
    return this._event.parameters[0].value.toTuple() as SignUp_userPubKeyStruct;
  }

  get _stateIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _voiceCreditBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SignUp_userPubKeyStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class MACI__coordinatorPubKeyResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class MACI__genBatchUstPublicSignalsInput_ecdhPubKeysStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class MACI__hashMessageInput_messageStruct extends ethereum.Tuple {
  get iv(): BigInt {
    return this[0].toBigInt();
  }

  get data(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

export class MACI__hashStateLeafInput_stateLeafStruct extends ethereum.Tuple {
  get pubKey(): MACI__hashStateLeafInput_stateLeafPubKeyStruct {
    return this[0].toTuple() as MACI__hashStateLeafInput_stateLeafPubKeyStruct;
  }

  get voteOptionTreeRoot(): BigInt {
    return this[1].toBigInt();
  }

  get voiceCreditBalance(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }
}

export class MACI__hashStateLeafInput_stateLeafPubKeyStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class MACI__treeDepthsResult {
  value0: i32;
  value1: i32;
  value2: i32;

  constructor(value0: i32, value1: i32, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }
}

export class MACI extends ethereum.SmartContract {
  static bind(address: Address): MACI {
    return new MACI("MACI", address);
  }

  calcEmptyVoteOptionTreeRoot(_levels: i32): BigInt {
    let result = super.call(
      "calcEmptyVoteOptionTreeRoot",
      "calcEmptyVoteOptionTreeRoot(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_levels))]
    );

    return result[0].toBigInt();
  }

  try_calcEmptyVoteOptionTreeRoot(_levels: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcEmptyVoteOptionTreeRoot",
      "calcEmptyVoteOptionTreeRoot(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_levels))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcSignUpDeadline(): BigInt {
    let result = super.call(
      "calcSignUpDeadline",
      "calcSignUpDeadline():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calcSignUpDeadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcSignUpDeadline",
      "calcSignUpDeadline():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcVotingDeadline(): BigInt {
    let result = super.call(
      "calcVotingDeadline",
      "calcVotingDeadline():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calcVotingDeadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcVotingDeadline",
      "calcVotingDeadline():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeEmptyQuinRoot(_treeLevels: i32, _zeroValue: BigInt): BigInt {
    let result = super.call(
      "computeEmptyQuinRoot",
      "computeEmptyQuinRoot(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_treeLevels)),
        ethereum.Value.fromUnsignedBigInt(_zeroValue)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeEmptyQuinRoot(
    _treeLevels: i32,
    _zeroValue: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeEmptyQuinRoot",
      "computeEmptyQuinRoot(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_treeLevels)),
        ethereum.Value.fromUnsignedBigInt(_zeroValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeEmptyRoot(_treeLevels: i32, _zeroValue: BigInt): BigInt {
    let result = super.call(
      "computeEmptyRoot",
      "computeEmptyRoot(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_treeLevels)),
        ethereum.Value.fromUnsignedBigInt(_zeroValue)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeEmptyRoot(
    _treeLevels: i32,
    _zeroValue: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeEmptyRoot",
      "computeEmptyRoot(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_treeLevels)),
        ethereum.Value.fromUnsignedBigInt(_zeroValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  coordinatorAddress(): Address {
    let result = super.call(
      "coordinatorAddress",
      "coordinatorAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_coordinatorAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "coordinatorAddress",
      "coordinatorAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coordinatorPubKey(): MACI__coordinatorPubKeyResult {
    let result = super.call(
      "coordinatorPubKey",
      "coordinatorPubKey():(uint256,uint256)",
      []
    );

    return new MACI__coordinatorPubKeyResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_coordinatorPubKey(): ethereum.CallResult<MACI__coordinatorPubKeyResult> {
    let result = super.tryCall(
      "coordinatorPubKey",
      "coordinatorPubKey():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MACI__coordinatorPubKeyResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  currentMessageBatchIndex(): BigInt {
    let result = super.call(
      "currentMessageBatchIndex",
      "currentMessageBatchIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentMessageBatchIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentMessageBatchIndex",
      "currentMessageBatchIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentPerVOSpentVoiceCreditsCommitment(): BigInt {
    let result = super.call(
      "currentPerVOSpentVoiceCreditsCommitment",
      "currentPerVOSpentVoiceCreditsCommitment():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentPerVOSpentVoiceCreditsCommitment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentPerVOSpentVoiceCreditsCommitment",
      "currentPerVOSpentVoiceCreditsCommitment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentQvtBatchNum(): BigInt {
    let result = super.call(
      "currentQvtBatchNum",
      "currentQvtBatchNum():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentQvtBatchNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentQvtBatchNum",
      "currentQvtBatchNum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentResultsCommitment(): BigInt {
    let result = super.call(
      "currentResultsCommitment",
      "currentResultsCommitment():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentResultsCommitment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentResultsCommitment",
      "currentResultsCommitment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentSpentVoiceCreditsCommitment(): BigInt {
    let result = super.call(
      "currentSpentVoiceCreditsCommitment",
      "currentSpentVoiceCreditsCommitment():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentSpentVoiceCreditsCommitment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentSpentVoiceCreditsCommitment",
      "currentSpentVoiceCreditsCommitment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emptyVoteOptionTreeRoot(): BigInt {
    let result = super.call(
      "emptyVoteOptionTreeRoot",
      "emptyVoteOptionTreeRoot():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_emptyVoteOptionTreeRoot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "emptyVoteOptionTreeRoot",
      "emptyVoteOptionTreeRoot():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  genBatchUstPublicSignals(
    _newStateRoot: BigInt,
    _ecdhPubKeys: Array<MACI__genBatchUstPublicSignalsInput_ecdhPubKeysStruct>
  ): Array<BigInt> {
    let result = super.call(
      "genBatchUstPublicSignals",
      "genBatchUstPublicSignals(uint256,(uint256,uint256)[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_newStateRoot),
        ethereum.Value.fromTupleArray(_ecdhPubKeys)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_genBatchUstPublicSignals(
    _newStateRoot: BigInt,
    _ecdhPubKeys: Array<MACI__genBatchUstPublicSignalsInput_ecdhPubKeysStruct>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "genBatchUstPublicSignals",
      "genBatchUstPublicSignals(uint256,(uint256,uint256)[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_newStateRoot),
        ethereum.Value.fromTupleArray(_ecdhPubKeys)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  genQvtPublicSignals(
    _intermediateStateRoot: BigInt,
    _newResultsCommitment: BigInt,
    _newSpentVoiceCreditsCommitment: BigInt,
    _newPerVOSpentVoiceCreditsCommitment: BigInt,
    _totalVotes: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "genQvtPublicSignals",
      "genQvtPublicSignals(uint256,uint256,uint256,uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_intermediateStateRoot),
        ethereum.Value.fromUnsignedBigInt(_newResultsCommitment),
        ethereum.Value.fromUnsignedBigInt(_newSpentVoiceCreditsCommitment),
        ethereum.Value.fromUnsignedBigInt(_newPerVOSpentVoiceCreditsCommitment),
        ethereum.Value.fromUnsignedBigInt(_totalVotes)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_genQvtPublicSignals(
    _intermediateStateRoot: BigInt,
    _newResultsCommitment: BigInt,
    _newSpentVoiceCreditsCommitment: BigInt,
    _newPerVOSpentVoiceCreditsCommitment: BigInt,
    _totalVotes: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "genQvtPublicSignals",
      "genQvtPublicSignals(uint256,uint256,uint256,uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_intermediateStateRoot),
        ethereum.Value.fromUnsignedBigInt(_newResultsCommitment),
        ethereum.Value.fromUnsignedBigInt(_newSpentVoiceCreditsCommitment),
        ethereum.Value.fromUnsignedBigInt(_newPerVOSpentVoiceCreditsCommitment),
        ethereum.Value.fromUnsignedBigInt(_totalVotes)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getMessageTreeRoot(): BigInt {
    let result = super.call(
      "getMessageTreeRoot",
      "getMessageTreeRoot():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMessageTreeRoot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMessageTreeRoot",
      "getMessageTreeRoot():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStateTreeRoot(): BigInt {
    let result = super.call(
      "getStateTreeRoot",
      "getStateTreeRoot():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStateTreeRoot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStateTreeRoot",
      "getStateTreeRoot():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasUnprocessedMessages(): boolean {
    let result = super.call(
      "hasUnprocessedMessages",
      "hasUnprocessedMessages():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_hasUnprocessedMessages(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasUnprocessedMessages",
      "hasUnprocessedMessages():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasUntalliedStateLeaves(): boolean {
    let result = super.call(
      "hasUntalliedStateLeaves",
      "hasUntalliedStateLeaves():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_hasUntalliedStateLeaves(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasUntalliedStateLeaves",
      "hasUntalliedStateLeaves():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hash11(array: Array<BigInt>): BigInt {
    let result = super.call("hash11", "hash11(uint256[]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array)
    ]);

    return result[0].toBigInt();
  }

  try_hash11(array: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("hash11", "hash11(uint256[]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hash5(array: Array<BigInt>): BigInt {
    let result = super.call("hash5", "hash5(uint256[5]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array)
    ]);

    return result[0].toBigInt();
  }

  try_hash5(array: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("hash5", "hash5(uint256[5]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashLeftRight(_left: BigInt, _right: BigInt): BigInt {
    let result = super.call(
      "hashLeftRight",
      "hashLeftRight(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_left),
        ethereum.Value.fromUnsignedBigInt(_right)
      ]
    );

    return result[0].toBigInt();
  }

  try_hashLeftRight(
    _left: BigInt,
    _right: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashLeftRight",
      "hashLeftRight(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_left),
        ethereum.Value.fromUnsignedBigInt(_right)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashMessage(_message: MACI__hashMessageInput_messageStruct): BigInt {
    let result = super.call(
      "hashMessage",
      "hashMessage((uint256,uint256[10])):(uint256)",
      [ethereum.Value.fromTuple(_message)]
    );

    return result[0].toBigInt();
  }

  try_hashMessage(
    _message: MACI__hashMessageInput_messageStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashMessage",
      "hashMessage((uint256,uint256[10])):(uint256)",
      [ethereum.Value.fromTuple(_message)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashStateLeaf(_stateLeaf: MACI__hashStateLeafInput_stateLeafStruct): BigInt {
    let result = super.call(
      "hashStateLeaf",
      "hashStateLeaf(((uint256,uint256),uint256,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_stateLeaf)]
    );

    return result[0].toBigInt();
  }

  try_hashStateLeaf(
    _stateLeaf: MACI__hashStateLeafInput_stateLeafStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashStateLeaf",
      "hashStateLeaf(((uint256,uint256),uint256,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_stateLeaf)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashedBlankStateLeaf(): BigInt {
    let result = super.call(
      "hashedBlankStateLeaf",
      "hashedBlankStateLeaf():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_hashedBlankStateLeaf(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashedBlankStateLeaf",
      "hashedBlankStateLeaf():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialVoiceCreditProxy(): Address {
    let result = super.call(
      "initialVoiceCreditProxy",
      "initialVoiceCreditProxy():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_initialVoiceCreditProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "initialVoiceCreditProxy",
      "initialVoiceCreditProxy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxMessages(): BigInt {
    let result = super.call("maxMessages", "maxMessages():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxMessages(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxMessages", "maxMessages():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxUsers(): BigInt {
    let result = super.call("maxUsers", "maxUsers():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxUsers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxUsers", "maxUsers():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  messageBatchSize(): i32 {
    let result = super.call(
      "messageBatchSize",
      "messageBatchSize():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_messageBatchSize(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "messageBatchSize",
      "messageBatchSize():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  messageTree(): Address {
    let result = super.call("messageTree", "messageTree():(address)", []);

    return result[0].toAddress();
  }

  try_messageTree(): ethereum.CallResult<Address> {
    let result = super.tryCall("messageTree", "messageTree():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  messageTreeMaxLeafIndex(): BigInt {
    let result = super.call(
      "messageTreeMaxLeafIndex",
      "messageTreeMaxLeafIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_messageTreeMaxLeafIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "messageTreeMaxLeafIndex",
      "messageTreeMaxLeafIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numMessages(): BigInt {
    let result = super.call("numMessages", "numMessages():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numMessages(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numMessages", "numMessages():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numSignUps(): BigInt {
    let result = super.call("numSignUps", "numSignUps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numSignUps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numSignUps", "numSignUps():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  originalCurrentResultsCommitment(): BigInt {
    let result = super.call(
      "originalCurrentResultsCommitment",
      "originalCurrentResultsCommitment():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_originalCurrentResultsCommitment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "originalCurrentResultsCommitment",
      "originalCurrentResultsCommitment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  originalSpentVoiceCreditsCommitment(): BigInt {
    let result = super.call(
      "originalSpentVoiceCreditsCommitment",
      "originalSpentVoiceCreditsCommitment():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_originalSpentVoiceCreditsCommitment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "originalSpentVoiceCreditsCommitment",
      "originalSpentVoiceCreditsCommitment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signUpDurationSeconds(): BigInt {
    let result = super.call(
      "signUpDurationSeconds",
      "signUpDurationSeconds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_signUpDurationSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signUpDurationSeconds",
      "signUpDurationSeconds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signUpGatekeeper(): Address {
    let result = super.call(
      "signUpGatekeeper",
      "signUpGatekeeper():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_signUpGatekeeper(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "signUpGatekeeper",
      "signUpGatekeeper():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  signUpTimestamp(): BigInt {
    let result = super.call(
      "signUpTimestamp",
      "signUpTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_signUpTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signUpTimestamp",
      "signUpTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stateRoot(): BigInt {
    let result = super.call("stateRoot", "stateRoot():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stateRoot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stateRoot", "stateRoot():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stateRootBeforeProcessing(): BigInt {
    let result = super.call(
      "stateRootBeforeProcessing",
      "stateRootBeforeProcessing():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stateRootBeforeProcessing(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stateRootBeforeProcessing",
      "stateRootBeforeProcessing():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stateTree(): Address {
    let result = super.call("stateTree", "stateTree():(address)", []);

    return result[0].toAddress();
  }

  try_stateTree(): ethereum.CallResult<Address> {
    let result = super.tryCall("stateTree", "stateTree():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tallyBatchSize(): i32 {
    let result = super.call("tallyBatchSize", "tallyBatchSize():(uint8)", []);

    return result[0].toI32();
  }

  try_tallyBatchSize(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "tallyBatchSize",
      "tallyBatchSize():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  totalVotes(): BigInt {
    let result = super.call("totalVotes", "totalVotes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalVotes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalVotes", "totalVotes():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treeDepths(): MACI__treeDepthsResult {
    let result = super.call(
      "treeDepths",
      "treeDepths():(uint8,uint8,uint8)",
      []
    );

    return new MACI__treeDepthsResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32()
    );
  }

  try_treeDepths(): ethereum.CallResult<MACI__treeDepthsResult> {
    let result = super.tryCall(
      "treeDepths",
      "treeDepths():(uint8,uint8,uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MACI__treeDepthsResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32()
      )
    );
  }

  verifySpentVoiceCredits(_spent: BigInt, _salt: BigInt): boolean {
    let result = super.call(
      "verifySpentVoiceCredits",
      "verifySpentVoiceCredits(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_spent),
        ethereum.Value.fromUnsignedBigInt(_salt)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifySpentVoiceCredits(
    _spent: BigInt,
    _salt: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifySpentVoiceCredits",
      "verifySpentVoiceCredits(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_spent),
        ethereum.Value.fromUnsignedBigInt(_salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  voteOptionsMaxLeafIndex(): BigInt {
    let result = super.call(
      "voteOptionsMaxLeafIndex",
      "voteOptionsMaxLeafIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_voteOptionsMaxLeafIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "voteOptionsMaxLeafIndex",
      "voteOptionsMaxLeafIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingDurationSeconds(): BigInt {
    let result = super.call(
      "votingDurationSeconds",
      "votingDurationSeconds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_votingDurationSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingDurationSeconds",
      "votingDurationSeconds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _treeDepths(): ConstructorCall_treeDepthsStruct {
    return this._call.inputValues[0].value.toTuple() as ConstructorCall_treeDepthsStruct;
  }

  get _batchSizes(): ConstructorCall_batchSizesStruct {
    return this._call.inputValues[1].value.toTuple() as ConstructorCall_batchSizesStruct;
  }

  get _maxValues(): ConstructorCall_maxValuesStruct {
    return this._call.inputValues[2].value.toTuple() as ConstructorCall_maxValuesStruct;
  }

  get _signUpGatekeeper(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _batchUstVerifier(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _qvtVerifier(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _signUpDurationSeconds(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _votingDurationSeconds(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _initialVoiceCreditProxy(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _coordinatorPubKey(): ConstructorCall_coordinatorPubKeyStruct {
    return this._call.inputValues[9].value.toTuple() as ConstructorCall_coordinatorPubKeyStruct;
  }

  get _coordinatorAddress(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_treeDepthsStruct extends ethereum.Tuple {
  get stateTreeDepth(): i32 {
    return this[0].toI32();
  }

  get messageTreeDepth(): i32 {
    return this[1].toI32();
  }

  get voteOptionTreeDepth(): i32 {
    return this[2].toI32();
  }
}

export class ConstructorCall_batchSizesStruct extends ethereum.Tuple {
  get tallyBatchSize(): i32 {
    return this[0].toI32();
  }

  get messageBatchSize(): i32 {
    return this[1].toI32();
  }
}

export class ConstructorCall_maxValuesStruct extends ethereum.Tuple {
  get maxUsers(): BigInt {
    return this[0].toBigInt();
  }

  get maxMessages(): BigInt {
    return this[1].toBigInt();
  }

  get maxVoteOptions(): BigInt {
    return this[2].toBigInt();
  }
}

export class ConstructorCall_coordinatorPubKeyStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class BatchProcessMessageCall extends ethereum.Call {
  get inputs(): BatchProcessMessageCall__Inputs {
    return new BatchProcessMessageCall__Inputs(this);
  }

  get outputs(): BatchProcessMessageCall__Outputs {
    return new BatchProcessMessageCall__Outputs(this);
  }
}

export class BatchProcessMessageCall__Inputs {
  _call: BatchProcessMessageCall;

  constructor(call: BatchProcessMessageCall) {
    this._call = call;
  }

  get _newStateRoot(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ecdhPubKeys(): Array<BatchProcessMessageCall_ecdhPubKeysStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      BatchProcessMessageCall_ecdhPubKeysStruct
    >();
  }

  get _proof(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BatchProcessMessageCall__Outputs {
  _call: BatchProcessMessageCall;

  constructor(call: BatchProcessMessageCall) {
    this._call = call;
  }
}

export class BatchProcessMessageCall_ecdhPubKeysStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class CoordinatorResetCall extends ethereum.Call {
  get inputs(): CoordinatorResetCall__Inputs {
    return new CoordinatorResetCall__Inputs(this);
  }

  get outputs(): CoordinatorResetCall__Outputs {
    return new CoordinatorResetCall__Outputs(this);
  }
}

export class CoordinatorResetCall__Inputs {
  _call: CoordinatorResetCall;

  constructor(call: CoordinatorResetCall) {
    this._call = call;
  }
}

export class CoordinatorResetCall__Outputs {
  _call: CoordinatorResetCall;

  constructor(call: CoordinatorResetCall) {
    this._call = call;
  }
}

export class ProveVoteTallyBatchCall extends ethereum.Call {
  get inputs(): ProveVoteTallyBatchCall__Inputs {
    return new ProveVoteTallyBatchCall__Inputs(this);
  }

  get outputs(): ProveVoteTallyBatchCall__Outputs {
    return new ProveVoteTallyBatchCall__Outputs(this);
  }
}

export class ProveVoteTallyBatchCall__Inputs {
  _call: ProveVoteTallyBatchCall;

  constructor(call: ProveVoteTallyBatchCall) {
    this._call = call;
  }

  get _intermediateStateRoot(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newResultsCommitment(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _newSpentVoiceCreditsCommitment(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _newPerVOSpentVoiceCreditsCommitment(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _totalVotes(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _proof(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class ProveVoteTallyBatchCall__Outputs {
  _call: ProveVoteTallyBatchCall;

  constructor(call: ProveVoteTallyBatchCall) {
    this._call = call;
  }
}

export class PublishMessageCall extends ethereum.Call {
  get inputs(): PublishMessageCall__Inputs {
    return new PublishMessageCall__Inputs(this);
  }

  get outputs(): PublishMessageCall__Outputs {
    return new PublishMessageCall__Outputs(this);
  }
}

export class PublishMessageCall__Inputs {
  _call: PublishMessageCall;

  constructor(call: PublishMessageCall) {
    this._call = call;
  }

  get _message(): PublishMessageCall_messageStruct {
    return this._call.inputValues[0].value.toTuple() as PublishMessageCall_messageStruct;
  }

  get _encPubKey(): PublishMessageCall_encPubKeyStruct {
    return this._call.inputValues[1].value.toTuple() as PublishMessageCall_encPubKeyStruct;
  }
}

export class PublishMessageCall__Outputs {
  _call: PublishMessageCall;

  constructor(call: PublishMessageCall) {
    this._call = call;
  }
}

export class PublishMessageCall_messageStruct extends ethereum.Tuple {
  get iv(): BigInt {
    return this[0].toBigInt();
  }

  get data(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

export class PublishMessageCall_encPubKeyStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}

export class SignUpCall extends ethereum.Call {
  get inputs(): SignUpCall__Inputs {
    return new SignUpCall__Inputs(this);
  }

  get outputs(): SignUpCall__Outputs {
    return new SignUpCall__Outputs(this);
  }
}

export class SignUpCall__Inputs {
  _call: SignUpCall;

  constructor(call: SignUpCall) {
    this._call = call;
  }

  get _userPubKey(): SignUpCall_userPubKeyStruct {
    return this._call.inputValues[0].value.toTuple() as SignUpCall_userPubKeyStruct;
  }

  get _signUpGatekeeperData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _initialVoiceCreditProxyData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SignUpCall__Outputs {
  _call: SignUpCall;

  constructor(call: SignUpCall) {
    this._call = call;
  }
}

export class SignUpCall_userPubKeyStruct extends ethereum.Tuple {
  get x(): BigInt {
    return this[0].toBigInt();
  }

  get y(): BigInt {
    return this[1].toBigInt();
  }
}
